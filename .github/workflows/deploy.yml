name: Deploy myhrm application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Add concurrency to prevent multiple deployments running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ vars.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_FCM_VAPID_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_FCM_VAPID_KEY }}
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${{ vars.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          if ! aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "_next/data/*"; then
            echo "Failed to sync static assets to S3"
            exit 1
          fi
  
          if ! aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "_next/data/*"; then
            echo "Failed to sync HTML and data files to S3"
            exit 1
          fi

      - name: Invalidate CloudFront cache
        uses: actions/github-script@v7
        with:
          script: |
            const maxRetries = 3;
            const baseDelay = 5000; // 5 seconds base delay
            
            const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            
            for (let i = 0; i < maxRetries; i++) {
              try {
                console.log(`Attempting CloudFront cache invalidation (attempt ${i + 1}/${maxRetries})...`);
                
                const { stdout } = await exec.exec('aws', [
                  'cloudfront',
                  'create-invalidation',
                  '--distribution-id',
                  ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }},
                  '--paths',
                  '/*'
                ]);
                
                console.log('CloudFront invalidation initiated successfully');
                console.log(stdout);
                
                // Wait for the invalidation to complete
                const invalidationId = JSON.parse(stdout).Invalidation.Id;
                console.log(`Waiting for invalidation ${invalidationId} to complete...`);
                
                while (true) {
                  const { stdout: statusOutput } = await exec.exec('aws', [
                    'cloudfront',
                    'get-invalidation',
                    '--distribution-id',
                    ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }},
                    '--id',
                    invalidationId
                  ]);
                  
                  const status = JSON.parse(statusOutput).Invalidation.Status;
                  
                  if (status === 'Completed') {
                    console.log('CloudFront cache invalidation completed successfully');
                    break;
                  } else if (status === 'Failed') {
                    throw new Error('CloudFront cache invalidation failed');
                  }
                  
                  await sleep(10000); // Check status every 10 seconds
                }
                
                break;
              } catch (error) {
                console.error(`Attempt ${i + 1} failed:`, error.message);
                
                if (i === maxRetries - 1) {
                  throw new Error(`Failed to invalidate CloudFront cache after ${maxRetries} attempts: ${error.message}`);
                }
                
                const delay = baseDelay * Math.pow(2, i); // Exponential backoff
                console.log(`Waiting ${delay/1000} seconds before retry...`);
                await sleep(delay);
              }
            }

      - name: Deployment status notification
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { status, conclusion } = context.job
            const deployStatus = status === 'completed' && conclusion === 'success' ? '✅ Success' : '❌ Failed'
            const environment = 'Production'
            const branch = context.ref
            const sha = context.sha.substring(0, 7)
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
                
            const message = `
            ## Deployment Status: ${deployStatus}
            - **Environment:** ${environment}
            - **Branch:** ${branch}
            - **Commit:** ${sha}
            - **Workflow:** [View Details](${runUrl})
                
            ${conclusion !== 'success' ? '⚠️ Check workflow logs for details' : ''}
            `
            if (context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              })
            }